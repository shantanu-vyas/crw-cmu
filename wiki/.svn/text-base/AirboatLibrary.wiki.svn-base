#summary Description of the core Airboat library to be compiled with the server and the client applications
#labels Phase-Design,Phase-Implementation

= Introduction =

The aim here is to create  a barebone implementation of an interface  (preferably) or an abstract class library of rosjava precompiled within itself, so that this library could be implemented in any java project. Specifically, the implementation of this library for a real airboat will declare how, say, setWaypoint() works by selecting a controller and configuring it using PIDs. However, for a simulation, these methods could be declared so as to only move in a cartesian space on the GUI, or however the simulator wants to move the boats.

= Details =

This library handles the basic minimum methods required to control an airboat;higher order functions like setAOI(Area Of Interest), setNewThresh(To set the 'newness' threshold for the image) and airboatStates (Which stores the state of the other boats) are not crucial to the core functionality and can be implemented with the boat control implementation of this bare bones library.

Not everything required by the server needs to be published.

Topics to be published by the server

|| *Name*  || *Description* ||
|| state  || Published state of the Airboat||
|| image  || Publishes the captured image ||
|| sensor1 || Publishes sensor data ||
|| sensor2 || -do- ||
|| sensor3 || -do- ||

Service methods implemented for the server

|| *Name* || *Arguments* || *Description* ||
|| startCamera || || Starts the camera capture activity ||
|| setState || geometry_pose || Assigns a state to the Airboat ||
|| setWaypoint || geometry_pose || Assigns a waypoint to be follwed by the Airboat ||
|| setPID || twist || Sets the PID gains for the Airboat ||
|| capture || int interval || Returns an image after interval seconds ||
|| getWaypoint || || Returns the current Waypoint for the Airboat ||
|| getPID || || Returns the current PID gains for the Airboat ||
|| getSensorType || int index || Returns the type of sensor (Serial/Digital/Analog) ||