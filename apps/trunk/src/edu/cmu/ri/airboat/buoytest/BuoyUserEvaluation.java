/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BuoyUserEvaluation.java
 *
 * Created on Nov 16, 2011, 10:23:40 AM
 */
package edu.cmu.ri.airboat.buoytest;

import edu.cmu.ri.airboat.buoytest.BuoyManager.BuoyIDModel;
import edu.cmu.ri.airboat.general.BufferedImageWithPose;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneLayout;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author pscerri
 */
public class BuoyUserEvaluation extends javax.swing.JFrame {

    /** Creates new form BuoyUserEvaluation */
    public BuoyUserEvaluation(ArrayList<BuoyIDModel> models) {
        initComponents();
        
        JPanel mPanel = new JPanel(new GridLayout(0, 1));
        JScrollPane scrollPane = new JScrollPane(mPanel);
        // @todo Fix scrolling policy
        // scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        setLayout(new BorderLayout());
        add(scrollPane, BorderLayout.CENTER);

        for (BuoyIDModel buoyIDModel : models) {
            mPanel.add(new SingleCheckPanel(buoyIDModel));

        }
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1130, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 678, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private class SingleCheckPanel extends JPanel {
        
        ButtonGroup group = new ButtonGroup();
        JRadioButton presentRB = new JRadioButton("Present");
        JRadioButton notPresentRB = new JRadioButton("Absent");
        JRadioButton inconclusiveRB = new JRadioButton("Inconclusive");
        JCheckBox doneCB = new JCheckBox("Done");
        
        {
            group.add(presentRB);
            group.add(notPresentRB);
            group.add(inconclusiveRB);
            inconclusiveRB.setSelected(true);
        }
        
        public SingleCheckPanel(final BuoyIDModel model) {
            setLayout(new BorderLayout());
            
            doneCB.setSelected(model.isDone());
            
            if (!model.isDone()) {
                JPanel buttPanel = new JPanel(new GridLayout(0, 1));
                buttPanel.setBorder(new EtchedBorder());
                JTextField latT = new JTextField("Lat: " + model.getLoc().latitude);
                latT.setEditable(false);
                buttPanel.add(latT);
                JTextField lonT = new JTextField("Lon: " + model.getLoc().longitude);
                lonT.setEditable(false);
                buttPanel.add(lonT);
                buttPanel.add(presentRB);
                buttPanel.add(notPresentRB);
                buttPanel.add(inconclusiveRB);
                buttPanel.add(doneCB);
                add(buttPanel, BorderLayout.WEST);
                
                JPanel imgPanel = new JPanel();
                imgPanel.setLayout(new FlowLayout());
                JScrollPane scrollPane = new JScrollPane(imgPanel);
                scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
                scrollPane.setLayout(new ScrollPaneLayout());
                for (BufferedImageWithPose img : model.imgs) {
                    SingleImageDisplay sid = new SingleImageDisplay(img);
                    imgPanel.add(sid);
                }
                scrollPane.doLayout();
                
                add(scrollPane, BorderLayout.CENTER);
                
                doneCB.addActionListener(new ActionListener() {
                    
                    public void actionPerformed(ActionEvent ae) {
                        model.setDone(doneCB.isSelected());

                        // @todo If this was changed to unselected, information should become available
                    }
                });
                
                notPresentRB.addChangeListener(new ChangeListener() {
                    
                    public void stateChanged(ChangeEvent ce) {
                        if (notPresentRB.isSelected()) {
                            model.setConfidence(0.0);
                        }
                    }
                });
                
                presentRB.addChangeListener(new ChangeListener() {
                    
                    public void stateChanged(ChangeEvent ce) {
                        if (presentRB.isSelected()) {
                            model.setConfidence(1.0);
                        }
                    }
                });
                
                inconclusiveRB.addChangeListener(new ChangeListener() {
                    
                    public void stateChanged(ChangeEvent ce) {
                        if (inconclusiveRB.isSelected()) {
                            model.setConfidence(0.5);
                        }
                    }
                });
            } else {
                
                add(doneCB, BorderLayout.CENTER);
                
                presentRB.setEnabled(false);
                notPresentRB.setEnabled(false);
                inconclusiveRB.setEnabled(false);
            }
        }
        
        private class SingleImageDisplay extends JPanel {
            
            private final BufferedImageWithPose pimg;
            
            public SingleImageDisplay(BufferedImageWithPose pimg) {
                this.pimg = pimg;
            }
            
            public void paint(Graphics g) {
                g.drawImage(pimg.getImg(), 0, 0, this);
            }
            
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(250, 250);
            }
        }
    }
}
