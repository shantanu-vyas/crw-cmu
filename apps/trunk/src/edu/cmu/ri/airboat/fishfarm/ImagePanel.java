/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImagePanel.java
 *
 * Created on Aug 25, 2011, 3:26:00 PM
 */
package edu.cmu.ri.airboat.fishfarm;

import edu.cmu.ri.airboat.general.BufferedImageWithPose;
import edu.cmu.ri.airboat.general.ProxyManager;
import edu.cmu.ri.crw.data.UtmPose;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.PriorityBlockingQueue;
import javax.imageio.ImageIO;

/**
 *
 * @author pscerri
 */
public class ImagePanel extends javax.swing.JPanel {

    private static PriorityBlockingQueue<BufferedImageWithPose> queue = new PriorityBlockingQueue<BufferedImageWithPose>();
    private static File imagesDir = null;

    static public void setImagesDirectory(String loc) {
        imagesDir = new File(loc);
        if (!imagesDir.isDirectory()) {
            System.out.println("Invalid directory for images");
            imagesDir = null;
        }
    }
    final int noPanels = 1;
    private SingleImagePanel[] imgPanels = new SingleImagePanel[noPanels];

    /** Creates new form ImagePanel */
    public ImagePanel() {
        initComponents();

        imagesP.setLayout(new GridLayout(0, 1));
        for (int i = 0; i < imgPanels.length; i++) {
            imgPanels[i] = new SingleImagePanel();
            imagesP.add(imgPanels[i]);
        }
    }

    public static void addImage(BufferedImage img, UtmPose pose) {
        
        if (imagesDir != null) {
            try {
                File outputfile = new File(imagesDir.getAbsolutePath() + File.separator + "BoatImg" + (new Date()) + ".png");
                System.out.println("Writing to " + outputfile + " " + pose);
                ImageIO.write(img, "png", outputfile);
            } catch (IOException e) {
                System.out.println("Failed to write image to file: " + e);
            }
        } else {
            // System.out.println("Do not know where to save images");
        }

        if (queue.size() > 100) {
            int v = rateS.getValue();
            int nv = Math.min(100, Math.max(v, (rateS.getValue() / 10)));
            if (v != nv) {
                rateS.setValue(nv);
            }
        }

        if (queue.size() < 1000) {
            queue.offer(new BufferedImageWithPose(img, pose));
            queueP.setValue(Math.min(100, queue.size()));
        } else {
            System.out.println("No longer queuing images, queue is full");
        }
    }

    public static BufferedImage getImage() {
        try {
            BufferedImage b = queue.take().img;
            queueP.setValue(Math.min(100, queue.size()));
            return b;
        } catch (InterruptedException e) {
        }
        return null;
    }
    
    public static long count = 0L;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagesP = new javax.swing.JPanel();
        controlsP = new javax.swing.JPanel();
        queueP = new javax.swing.JProgressBar();
        rateS = new javax.swing.JSlider();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Images"));

        org.jdesktop.layout.GroupLayout imagesPLayout = new org.jdesktop.layout.GroupLayout(imagesP);
        imagesP.setLayout(imagesPLayout);
        imagesPLayout.setHorizontalGroup(
            imagesPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 242, Short.MAX_VALUE)
        );
        imagesPLayout.setVerticalGroup(
            imagesPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 738, Short.MAX_VALUE)
        );

        rateS.setMinimum(1);
        rateS.setToolTipText("Time Between Images");
        rateS.setValue(10);
        rateS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rateSStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout controlsPLayout = new org.jdesktop.layout.GroupLayout(controlsP);
        controlsP.setLayout(controlsPLayout);
        controlsPLayout.setHorizontalGroup(
            controlsPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, queueP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
            .add(controlsPLayout.createSequentialGroup()
                .add(4, 4, 4)
                .add(rateS, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addContainerGap())
        );
        controlsPLayout.setVerticalGroup(
            controlsPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, controlsPLayout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .add(rateS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(queueP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, controlsP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, imagesP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(imagesP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(controlsP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rateSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rateSStateChanged
        if (!rateS.getModel().getValueIsAdjusting()) {
            ProxyManager.setCameraRates((double) rateS.getValue());
        }
    }//GEN-LAST:event_rateSStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlsP;
    private javax.swing.JPanel imagesP;
    private static javax.swing.JProgressBar queueP;
    private static javax.swing.JSlider rateS;
    // End of variables declaration//GEN-END:variables

    
}
