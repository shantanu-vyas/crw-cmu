/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AutonomyPanel.java
 *
 * Created on Nov 13, 2011, 1:26:55 PM
 */
package edu.cmu.ri.airboat.enduser;

import edu.cmu.ri.airboat.floodtest.*;
import edu.cmu.ri.airboat.generalAlmost.BoatSimpleProxy;
import gov.nasa.worldwind.geom.Angle;
import gov.nasa.worldwind.geom.LatLon;
import gov.nasa.worldwind.geom.coords.UTMCoord;
import gov.nasa.worldwind.render.Polygon;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;

/**
 *
 * @author pscerri
 */
public class AutonomyPanel extends javax.swing.JPanel {

    /** Creates new form AutonomyPanel */
    public AutonomyPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        initSensorB = new javax.swing.JButton();
        buoyDetectionB = new javax.swing.JButton();
        dataSelectCombo = new javax.swing.JComboBox();
        popupB = new javax.swing.JButton();
        checkBuoyB = new javax.swing.JButton();

        initSensorB.setText("Initialize Water Sensing");
        initSensorB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSensorBActionPerformed(evt);
            }
        });

        buoyDetectionB.setText("Initialize Bouy Detection");
        buoyDetectionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buoyDetectionBActionPerformed(evt);
            }
        });

        dataSelectCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        dataSelectCombo.setEnabled(false);

        popupB.setText("External");
        popupB.setEnabled(false);
        popupB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupBActionPerformed(evt);
            }
        });

        checkBuoyB.setText("Check");
        checkBuoyB.setEnabled(false);
        checkBuoyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBuoyBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, buoyDetectionB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, initSensorB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(dataSelectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(checkBuoyB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(popupB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(initSensorB)
                    .add(dataSelectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(popupB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buoyDetectionB)
                    .add(checkBuoyB))
                .addContainerGap(221, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initSensorBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSensorBActionPerformed
        OperatorConsole.setAssigningSensingArea(true);
    }//GEN-LAST:event_initSensorBActionPerformed

    private void buoyDetectionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buoyDetectionBActionPerformed
        OperatorConsole.setAssigningBuoyDetectionArea(true);
    }//GEN-LAST:event_buoyDetectionBActionPerformed

    private void popupBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupBActionPerformed
        DataDisplayPopup w = new DataDisplayPopup(null);

        // This is done by the DataDisplayPopup so it can fail if no data
        // w.setVisible(true);

    }//GEN-LAST:event_popupBActionPerformed

    private void checkBuoyBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBuoyBActionPerformed
        BoatSimpleProxy.showBuoyCheckFrame();
    }//GEN-LAST:event_checkBuoyBActionPerformed

    public static void setSensorArea(Polygon pgon) {

        initSensorB.setEnabled(false);
        popupB.setEnabled(true);

        double[] ul = new double[2];
        double[] lr = new double[2];

        ul[0] = Double.MAX_VALUE;
        ul[1] = Double.MAX_VALUE;

        double minLat = Double.MAX_VALUE;
        double maxLat = -Double.MAX_VALUE;
        double minLon = Double.MAX_VALUE;
        double maxLon = -Double.MAX_VALUE;

        // Compute bounds
        for (LatLon latLon : pgon.getOuterBoundary()) {

            System.out.println("Processing outer boundary point: " + latLon);

            UTMCoord utm = UTMCoord.fromLatLon(latLon.latitude, latLon.longitude);
            double e = utm.getEasting();
            double n = utm.getNorthing();

            // For sensing area
            if (e < ul[0]) {
                ul[0] = e;
            } else if (e > lr[0]) {
                lr[0] = e;
            }
            if (n < ul[1]) {
                ul[1] = n;
            } else if (n > lr[1]) {
                lr[1] = n;
            }

            // For drawing area
            if (latLon.latitude.degrees < minLat) {
                System.out.println("new minLat: " + minLat + " to " + latLon.latitude.degrees);
                minLat = latLon.latitude.degrees;
            } else if (latLon.latitude.degrees > maxLat) {
                System.out.println("new maxLat: " + maxLat + " to " + latLon.latitude.degrees);
                maxLat = latLon.latitude.degrees;
            }
            if (latLon.longitude.degrees < minLon) {
                System.out.println("new minLon: " + minLon + " to " + latLon.longitude.degrees);
                minLon = latLon.longitude.degrees;
            } else if (latLon.longitude.degrees > maxLon) {
                System.out.println("new maxLon: " + maxLon + " to " + latLon.longitude.degrees);
                maxLon = latLon.longitude.degrees;
            }
        }

        List list = Arrays.asList(
                LatLon.fromDegrees(minLat, minLon),
                LatLon.fromDegrees(minLat, maxLon),
                LatLon.fromDegrees(maxLat, maxLon),
                LatLon.fromDegrees(maxLat, minLon));

        System.out.println("List is " + list);

        SensingBoatSelect sbs = new SensingBoatSelect(null, true);
        sbs.setVisible(true);

        if (sbs.approved) {
            BoatSimpleProxy.autonomousSearchAlgorithm = (BoatSimpleProxy.AutonomousSearchAlgorithmOptions)sbs.algC.getSelectedItem();
            BoatSimpleProxy.initDataDisply(ul, lr, pgon, list);

            // Start the autonomy for the proxies
            ArrayList<BoatSimpleProxy> selected = sbs.getSelected();
            for (BoatSimpleProxy boatSimpleProxy : selected) {
                boatSimpleProxy.setAutonomousSense(selected);
            }
            
        } else {

            initSensorB.setEnabled(true);
        }
    }
    static String BUOY_INFO_START_KEY = "BUOY_INFO_START_KEY";

    static void setBuoyDetectionArea(Polygon pgon) {

        SensingBoatSelect sbs = new SensingBoatSelect(null, true);
        sbs.setVisible(true);

        if (sbs.approved) {

            ArrayList<LatLon> markerLocs = new ArrayList<LatLon>();

            JFileChooser fileChooser = new JFileChooser();

            try {
                fileChooser.setCurrentDirectory(new File(Preferences.userRoot().get(BUOY_INFO_START_KEY, "/")));
            } catch (AccessControlException e) {
            }

            fileChooser.showOpenDialog(null);
            File file = fileChooser.getSelectedFile();

            Preferences.userRoot().put(BUOY_INFO_START_KEY, file.getParent());

            if (file != null) {

                try {
                    BufferedReader br = new BufferedReader(new FileReader(file));
                    String markerInfo = null;
                    while ((markerInfo = br.readLine()) != null) {
                        if (!markerInfo.startsWith("#")) {
                            StringTokenizer tok = new StringTokenizer(markerInfo);
                            double lat = Double.parseDouble(tok.nextToken());
                            double lon = Double.parseDouble(tok.nextToken());
                            LatLon latLon = new LatLon(Angle.fromDegrees(lat), Angle.fromDegrees(lon));

                            // Only buoys in area
                            if (BoatSimpleProxy.isLocationInside(latLon, pgon.getOuterBoundary())) {
                                markerLocs.add(latLon);
                            }
                        }
                    }

                    BoatSimpleProxy.initBuoyDetection(markerLocs, pgon);

                    buoyDetectionB.setEnabled(false);
                    checkBuoyB.setEnabled(true);

                    ArrayList<BoatSimpleProxy> selected = sbs.getSelected();
                    for (BoatSimpleProxy boatSimpleProxy : selected) {
                        boatSimpleProxy.setAutonomousBuoy();
                    }

                } catch (Exception e) {
                    System.out.println("Starting buoy detection failed: " + e);
                    e.printStackTrace();
                }
            }


        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton buoyDetectionB;
    private static javax.swing.JButton checkBuoyB;
    public static javax.swing.JComboBox dataSelectCombo;
    private static javax.swing.JButton initSensorB;
    private static javax.swing.JButton popupB;
    // End of variables declaration//GEN-END:variables
}
