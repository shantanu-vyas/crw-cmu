/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectionPanel.java
 *
 * Created on Mar 2, 2011, 6:08:50 PM
 */

package edu.cmu.ri.airboat.client.gui;

import edu.cmu.ri.crw.VehicleServer;
import edu.cmu.ri.crw.ros.RosVehicleProxy;
import java.awt.Color;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.prefs.Preferences;

/**
 *
 * @author pkv
 */
public class ConnectionPanel extends javax.swing.JPanel {
    public static final String LAST_URI_KEY = "edu.cmu.ri.airboat.client.gui.LastConnection";

    public static int UPDATE_PERIOD_MS = 1000;

    private Timer _timer = new Timer();
    private RosVehicleProxy _vehicle = null;
    
    /** Creates new form ConnectionPanel */
    public ConnectionPanel() {
        initComponents();
        initUpdates();

        Preferences p = Preferences.userRoot();
        connectCombo.addItem(p.get(LAST_URI_KEY, ""));

        // Insert a shutdown hook to cleanly close the vehicle down
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                if (_vehicle != null)
                    _vehicle.shutdown();
            }
        });
    }

    /**
     * Starts up a timer task that periodically checks to see if the proxy
     * command object is actually returning values.  Changes the color of the
     * button to reflect this status.
     */
    private void initUpdates() {
        // Use proxies to periodically update status, check for connection
        _timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (_vehicle != null && (_vehicle.getNumSensors() > 0)) {
                    autonomousBox.setSelected(_vehicle.isAutonomous());
                    connectedBox.setSelected(true);
                    connectButton.setBackground(Color.GREEN);
                } else {
                    // TODO: make nicer colors
                    connectedBox.setSelected(false);
                    autonomousBox.setSelected(false);
                    connectButton.setBackground(Color.PINK);
                }
            }
        }, 0, UPDATE_PERIOD_MS);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectCombo = new javax.swing.JComboBox();
        connectButton = new javax.swing.JButton();
        connectedBox = new ReadOnlyCheckBox();
        autonomousBox = new ReadOnlyCheckBox();

        connectCombo.setEditable(true);
        connectCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://localhost:11411" }));

        connectButton.setText("Connect");
        connectButton.setOpaque(true);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        connectedBox.setForeground(new java.awt.Color(51, 51, 51));
        connectedBox.setText("Connected to Arduino");

        autonomousBox.setForeground(new java.awt.Color(51, 51, 51));
        autonomousBox.setText("Autonomous Mode");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(connectCombo, 0, 243, Short.MAX_VALUE)
            .add(connectedBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
            .add(autonomousBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
            .add(connectButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(connectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(connectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(7, 7, 7)
                .add(connectedBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autonomousBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        synchronized(this) {
            // Create a new proxy server that accesses the vehicle
            RosVehicleProxy vehicle = null;
            try {
                URI masterUri = new URI((String)connectCombo.getSelectedItem());
                vehicle = new RosVehicleProxy(masterUri, "vehicle_client" + new Random().nextInt(1000000));
                Preferences p = Preferences.userRoot();
                p.put(LAST_URI_KEY, masterUri.toString());
            } catch (Exception ex) {
                System.err.println("Failed to open vehicle proxy: " + ex);
                return;
            }

            if (vehicle == null)
                return;

            if (_vehicle != null)
                _vehicle.shutdown();

            _vehicle = vehicle;
            fireConnectionListener(_vehicle);
        }
    }//GEN-LAST:event_connectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autonomousBox;
    private javax.swing.JButton connectButton;
    private javax.swing.JComboBox connectCombo;
    private javax.swing.JCheckBox connectedBox;
    // End of variables declaration//GEN-END:variables

    public static interface ConnectionListener {
        public void connectionChanged(VehicleServer vehicle);
    }

    private List<ConnectionListener> listeners = new ArrayList<ConnectionListener>();

    public void addConnectionListener(ConnectionListener l) {
        listeners.add(l);
    }

    public void removeConnectionListener(ConnectionListener l) {
        listeners.remove(l);
    }

    protected void fireConnectionListener(VehicleServer vehicle){
        for(int i = 0; i < listeners.size(); i++)
            (listeners.get(i)).connectionChanged(vehicle);
    }
}

