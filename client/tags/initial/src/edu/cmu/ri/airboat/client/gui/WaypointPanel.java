/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WaypointPanel.java
 *
 * Created on Mar 2, 2011, 6:09:08 PM
 */

package edu.cmu.ri.airboat.client.gui;

import edu.cmu.ri.airboat.client.UtmUtils;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.geom.coords.UTMCoord;
import java.awt.event.MouseAdapter;

/**
 *
 * @author pkv
 */
public class WaypointPanel extends AbstractAirboatPanel {

    public static final int DEFAULT_UPDATE_MS = 1500;
    private SimpleWorldPanel _worldPanel = null;
    
    private double[] waypoint = new double[6];
    private int waypointZone;
    private boolean waypointHemisphereNorth;

    /** Creates new form WaypointPanel */
    public WaypointPanel() {
        initComponents();
        setUpdateRate(DEFAULT_UPDATE_MS);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currWaypointLabel = new javax.swing.JLabel();
        currWaypointText = new javax.swing.JTextField();
        selectedWaypointLabel = new javax.swing.JLabel();
        selectedWaypointText = new javax.swing.JTextField();
        completedBox = new ReadOnlyCheckBox();
        sendButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        currWaypointLabel.setText("Current:");

        currWaypointText.setEditable(false);
        currWaypointText.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        selectedWaypointLabel.setText("Selected on map:");

        selectedWaypointText.setEditable(false);

        completedBox.setForeground(new java.awt.Color(51, 51, 51));
        completedBox.setText("Completed");
        completedBox.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(currWaypointLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
                .add(completedBox))
            .add(currWaypointText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(selectedWaypointLabel)
                .addContainerGap())
            .add(selectedWaypointText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .add(sendButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currWaypointLabel)
                    .add(completedBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(currWaypointText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedWaypointLabel)
                .add(5, 5, 5)
                .add(selectedWaypointText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(sendButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        _command.setWaypoint(waypoint);
        // TODO: send UTM zone info as well
    }//GEN-LAST:event_sendButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox completedBox;
    private javax.swing.JLabel currWaypointLabel;
    private javax.swing.JTextField currWaypointText;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel selectedWaypointLabel;
    private javax.swing.JTextField selectedWaypointText;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    public void setWorldPanel(SimpleWorldPanel worldPanel) {
        if (_worldPanel != null) {
            _worldPanel.removeMouseListener(_waypointListener);
        }

        _worldPanel = worldPanel;
        _worldPanel.addMouseListener(_waypointListener);
    }

    private final MouseAdapter _waypointListener = new MouseAdapter() {
        @Override
        public void mouseReleased(java.awt.event.MouseEvent e) {
            Position wpPos = _worldPanel.click.getPosition();
            UTMCoord wpUtm = UTMCoord.fromLatLon(wpPos.getLatitude(), wpPos.getLongitude());

            Position boatPos = _worldPanel.boat.getPosition();
            UTMCoord boatUtm = UTMCoord.fromLatLon(boatPos.getLatitude(), boatPos.getLongitude());

            // Convert out of zone for boat-local coordinates
            // TODO: figure out how to fix this!
            UtmUtils.UTM fakeUtm = UtmUtils.convertZone(boatUtm, wpUtm);
            waypoint[0] = fakeUtm.northing;
            waypoint[1] = fakeUtm.easting;
            waypointZone = fakeUtm.zone;
            waypointHemisphereNorth = fakeUtm.isNorth;

            waypoint[2] = wpPos.getAltitude();
            waypoint[5] = (_worldPanel.waypoint.getHeading() != null) ? _worldPanel.waypoint.getHeading().getRadians() : 0.0;

            selectedWaypointText.setText("[" + waypoint[0] + ", " + waypoint[1] + ", " + waypoint[2] + "] " + waypointZone + " " + (waypointHemisphereNorth ? "North" : "South"));
        }
    };

    @Override
    protected void update() {
        if (_command != null) {
            try {
                completedBox.setSelected(_command.isWaypointComplete());

                double[] pose = _command.getWaypoint();
                if (pose.length < 3) {
                    return;
                }

                int zone = _command.getUTMZone();
                boolean hemisphereNorth = _command.isUTMHemisphereNorth();

                currWaypointText.setText("[" + pose[0] + ", " + pose[1] + ", " + pose[2] + "] " + zone + " " + (hemisphereNorth ? "North" : "South"));

                // Set marker position on globe map
                if (_worldPanel != null) {
                    String wwHemi = (hemisphereNorth) ? "gov.nasa.worldwind.avkey.North" : "gov.nasa.worldwind.avkey.South";
                    try {
                        UTMCoord boatPos = UTMCoord.fromUTM(zone, wwHemi, pose[1], pose[0]);
                        _worldPanel.waypoint.getAttributes().setOpacity(1.0);
                        _worldPanel.waypoint.setPosition(new Position(boatPos.getLatitude(), boatPos.getLongitude(), 0.0));
                    } catch (IllegalArgumentException ex) {
                        _worldPanel.waypoint.getAttributes().setOpacity(0.5);
                    }
                }

            } catch (java.lang.reflect.UndeclaredThrowableException ex) {
                currWaypointText.setText("");
                
                if (_worldPanel != null) {
                    _worldPanel.waypoint.getAttributes().setOpacity(0.0);
                }
            }

            WaypointPanel.this.repaint();
        }
    }
}
