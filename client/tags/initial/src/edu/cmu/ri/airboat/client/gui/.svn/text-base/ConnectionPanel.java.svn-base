/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectionPanel.java
 *
 * Created on Mar 2, 2011, 6:08:50 PM
 */

package edu.cmu.ri.airboat.client.gui;

import com.flat502.rox.client.XmlRpcClient;
import edu.cmu.ri.airboat.interfaces.AirboatCommand;
import edu.cmu.ri.airboat.interfaces.AirboatControl;
import java.awt.Color;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author pkv
 */
public class ConnectionPanel extends javax.swing.JPanel {

    public static int UPDATE_PERIOD_MS = 1000;

    private Timer _timer = new Timer();
    private AirboatControl _control = null;
    private AirboatCommand _command = null;

    /** Creates new form ConnectionPanel */
    public ConnectionPanel() {
        initComponents();
        initUpdates();
    }

    /**
     * Starts up a timer task that periodically checks to see if the proxy
     * command object is actually returning values.  Changes the color of the
     * button to reflect this status.
     */
    private void initUpdates() {
        // Use proxies to periodically update status, check for connection
        _timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (_command != null) {
                    try {
                        connectedBox.setSelected(_command.isConnected());
                        autonomousBox.setSelected(_command.isAutonomous());
                        connectButton.setBackground(Color.GREEN);
                    } catch(java.lang.reflect.UndeclaredThrowableException ex) {
                        // TODO: make nicer colors
                        connectedBox.setSelected(false);
                        autonomousBox.setSelected(false);
                        connectButton.setBackground(Color.PINK);
                    }
                }
            }
        }, 0, UPDATE_PERIOD_MS);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectCombo = new javax.swing.JComboBox();
        connectButton = new javax.swing.JButton();
        connectedBox = new ReadOnlyCheckBox();
        autonomousBox = new ReadOnlyCheckBox();

        connectCombo.setEditable(true);
        connectCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://localhost:5000" }));

        connectButton.setText("Connect");
        connectButton.setOpaque(true);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        connectedBox.setForeground(new java.awt.Color(51, 51, 51));
        connectedBox.setText("Connected to Arduino");

        autonomousBox.setForeground(new java.awt.Color(51, 51, 51));
        autonomousBox.setText("Autonomous Mode");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(connectCombo, 0, 216, Short.MAX_VALUE)
            .add(connectedBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
            .add(autonomousBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
            .add(connectButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(connectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(connectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(7, 7, 7)
                .add(connectedBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autonomousBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        // Open an RPC connection, if successful, send proxy objects to listeners
        try {
            XmlRpcClient client = new XmlRpcClient(new URL((String)connectCombo.getSelectedItem()));
            _control = (AirboatControl)client.proxyObject("control.", AirboatControl.class);
            _command = (AirboatCommand)client.proxyObject("command.", AirboatCommand.class);
            fireConnectionListener(_command, _control);
        } catch (Exception ex) {
            System.err.println("Failed to open XML-RPC proxies: " + ex);
        }
    }//GEN-LAST:event_connectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autonomousBox;
    private javax.swing.JButton connectButton;
    private javax.swing.JComboBox connectCombo;
    private javax.swing.JCheckBox connectedBox;
    // End of variables declaration//GEN-END:variables

    public static interface ConnectionListener {
        public void connectionChanged(AirboatCommand cmd, AirboatControl ctrl);
    }

    private List<ConnectionListener> listeners = new ArrayList<ConnectionListener>();

    public void addConnectionListener(ConnectionListener l) {
        listeners.add(l);
    }

    public void removeConnectionListener(ConnectionListener l) {
        listeners.remove(l);
    }

    protected void fireConnectionListener(AirboatCommand cmd, AirboatControl ctrl){
        for(int i = 0; i < listeners.size(); i++)
            (listeners.get(i)).connectionChanged(cmd, ctrl);
    }
}
