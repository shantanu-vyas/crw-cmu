/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WaypointPanel.java
 *
 * Created on Mar 2, 2011, 6:09:08 PM
 */

package edu.cmu.ri.airboat.client.gui;

import edu.cmu.ri.airboat.client.UtmUtils;
import edu.cmu.ri.crw.AsyncVehicleServer;
import edu.cmu.ri.crw.FunctionObserver;
import edu.cmu.ri.crw.FunctionObserver.FunctionError;
import edu.cmu.ri.crw.VehicleServer.WaypointState;
import edu.cmu.ri.crw.WaypointListener;
import edu.cmu.ri.crw.data.Utm;
import edu.cmu.ri.crw.data.UtmPose;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.geom.coords.UTMCoord;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.text.DecimalFormat;
import robotutils.Pose3D;

/**
 *
 * @author pkv
 */
public class WaypointPanel extends AbstractAirboatPanel {

    private static final DecimalFormat UTM_FORMAT = new DecimalFormat("0.00");
    public static final int DEFAULT_UPDATE_MS = 1000;
    
    private SimpleWorldPanel _worldPanel = null;
    private UtmPose _waypoint = new UtmPose();
    private final Object _waypointLock = new Object();

    /** Creates new form WaypointPanel */
    public WaypointPanel() {
        initComponents();
        setUpdateRate(DEFAULT_UPDATE_MS);
    }
    
    
    @Override
    public void setVehicle(AsyncVehicleServer vehicle) {
        super.setVehicle(vehicle);
        
        _vehicle.addWaypointListener(new WaypointListener() {
            public void waypointUpdate(WaypointState ws) {
                if (ws == WaypointState.DONE) {
                    completedBox.setSelected(true);
                    
                }
            }
        }, null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currWaypointLabel = new javax.swing.JLabel();
        currWaypointText = new javax.swing.JTextField();
        selectedWaypointLabel = new javax.swing.JLabel();
        selectedWaypointText = new javax.swing.JTextField();
        completedBox = new ReadOnlyCheckBox();
        sendButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();

        currWaypointLabel.setText("Current:");

        currWaypointText.setEditable(false);
        currWaypointText.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        selectedWaypointLabel.setText("Selected on map:");

        selectedWaypointText.setEditable(false);

        completedBox.setForeground(new java.awt.Color(51, 51, 51));
        completedBox.setText("Completed");
        completedBox.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(currWaypointLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
                .add(completedBox))
            .add(currWaypointText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(selectedWaypointLabel)
                .addContainerGap())
            .add(selectedWaypointText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
            .add(sendButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
            .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currWaypointLabel)
                    .add(completedBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(currWaypointText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedWaypointLabel)
                .add(5, 5, 5)
                .add(selectedWaypointText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(sendButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (_vehicle == null)
            return;

        UtmPose[] wpPose = new UtmPose[1];
        synchronized(_waypointLock) {
            wpPose[0] = _waypoint;
        }
        
        sendButton.setEnabled(false);
        sendButton.setSelected(true);
        
        _vehicle.startWaypoints(wpPose, "POINT_AND_SHOOT", new FunctionObserver<Void>() {

            public void completed(Void v) {
                completedBox.setSelected(false);
                
                sendButton.setBackground(Color.GREEN);
                sendButton.setOpaque(true);
                
                sendButton.setEnabled(true);
                sendButton.setSelected(false);
            }

            public void failed(FunctionError fe) {
                sendButton.setBackground(Color.PINK);
                sendButton.setOpaque(true);
                
                sendButton.setEnabled(true);
                sendButton.setSelected(false);
            }
        });
    }//GEN-LAST:event_sendButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (_vehicle == null)
            return;

        cancelButton.setEnabled(false);
        cancelButton.setSelected(true);
        
        _vehicle.stopWaypoints(new FunctionObserver<Void>() {

            public void completed(Void v) {
                completedBox.setSelected(false);
                
                cancelButton.setBackground(Color.GREEN);
                cancelButton.setOpaque(true);
                
                cancelButton.setEnabled(true);
                cancelButton.setSelected(false);
                // if cancel, hide the waypoint and just show the click
                _worldPanel.waypoint.getAttributes().setOpacity(0.0);
                _worldPanel.click.getAttributes().setOpacity(1.0);
                
                
            }

            public void failed(FunctionError fe) {
                cancelButton.setBackground(Color.PINK);
                cancelButton.setOpaque(true);
                
                cancelButton.setEnabled(true);
                cancelButton.setSelected(false);
            }
        });
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox completedBox;
    private javax.swing.JLabel currWaypointLabel;
    private javax.swing.JTextField currWaypointText;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel selectedWaypointLabel;
    private javax.swing.JTextField selectedWaypointText;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    public void setWorldPanel(SimpleWorldPanel worldPanel) {
        if (_worldPanel != null) {
            _worldPanel.removeMouseListener(_waypointListener);
        }

        _worldPanel = worldPanel;
        _worldPanel.addMouseListener(_waypointListener);
    }

    private final MouseAdapter _waypointListener = new MouseAdapter() {
        @Override
        public void mouseReleased(java.awt.event.MouseEvent e) {
            Position wpPos = _worldPanel.click.getPosition();
            Position boatPos = _worldPanel.boat.getPosition();
            if (wpPos == null || boatPos == null) return;
            
            UTMCoord wpUtm = UTMCoord.fromLatLon(wpPos.getLatitude(), wpPos.getLongitude());
            UTMCoord boatUtm = UTMCoord.fromLatLon(boatPos.getLatitude(), boatPos.getLongitude());

            // Convert out of zone for boat-local coordinates
            // TODO: figure out how to fix this!
            UtmUtils.UTM fakeUtm = UtmUtils.convertZone(boatUtm, wpUtm);
            Pose3D pose = new Pose3D(fakeUtm.easting, fakeUtm.northing, wpPos.getAltitude(), 
                    0.0, 0.0, (_worldPanel.waypoint.getHeading() != null) ? _worldPanel.waypoint.getHeading().getRadians() : 0.0);
            Utm origin = new Utm(fakeUtm.zone, fakeUtm.isNorth);
            
            synchronized(_waypointLock) {
                _waypoint = new UtmPose(pose, origin);
                selectedWaypointText.setText("[" + 
                        UTM_FORMAT.format(_waypoint.pose.getX()) + ", " +
                        UTM_FORMAT.format(_waypoint.pose.getY()) + ", " +
                        UTM_FORMAT.format(_waypoint.pose.getZ()) + "] " +
                        _waypoint.origin.zone + " " + (_waypoint.origin.isNorth ? "North" : "South"));
            }
        }
    };

    @Override
    protected void update() {
        if (_vehicle != null) {
            _vehicle.getWaypoints(new FunctionObserver<UtmPose[]>() {

                public void completed(UtmPose[] currWps) {
                    if (currWps == null || currWps.length < 1) {
                        return;
                    }
                    
                    UtmPose currWp = currWps[0];
                    if (currWp == null) {
                        return;
                    }
                    
                    if (currWaypointText != null) {
                        currWaypointText.setText("["
                                + UTM_FORMAT.format(currWp.pose.getX()) + ", "
                                + UTM_FORMAT.format(currWp.pose.getY()) + ", "
                                + UTM_FORMAT.format(currWp.pose.getZ()) + "] "
                                + currWp.origin.zone + " " + (currWp.origin.isNorth ? "North" : "South"));
                    }

                    // Set marker position on globe map
                    if (_worldPanel != null && currWp.origin.zone != 0) {
                        try {
                            String wwHemi = (currWp.origin.isNorth) ? "gov.nasa.worldwind.avkey.North" : "gov.nasa.worldwind.avkey.South";
                            UTMCoord boatPos = UTMCoord.fromUTM(currWp.origin.zone, wwHemi, currWp.pose.getX(), currWp.pose.getY());
                            _worldPanel.waypoint.getAttributes().setOpacity(1.0);
                            _worldPanel.waypoint.setPosition(new Position(boatPos.getLatitude(), boatPos.getLongitude(), 0.0));
                        } catch (Exception e) {
                            _worldPanel.waypoint.getAttributes().setOpacity(0.0);
                        }
                        _worldPanel.repaint();
                    }

                    WaypointPanel.this.repaint();
                }

                public void failed(FunctionError fe) {
                    // TODO: maybe report something here
                }
            });
        }
    }
}
